{"version":3,"sources":["components/CountLikes.js","components/Artists.js","App.js","serviceWorker.js","index.js"],"names":["CountLikes","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myRefUp","React","createRef","myRefDown","state","countLikes","likes","props","setState","e","name","parseLikes","parseInt","updateInfo","react_default","a","createElement","lib","s","className","key","onClick","bind","countDislikes","Component","Artists","sortData","data","orderDirection","sort","x","y","playcount","paintArtist","artistData","map","element","components_CountLikes","assertThisInitialized","orderDir","artists","artist","indexUpdate","indexOf","push","_this$props","photo","sortedData","header","reveal","image","waves","title","App","_this2","Data","forEach","fetch","concat","then","response","json","artistsData","values","track","components_Artists","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1f61250.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Icon } from 'react-materialize';\r\nimport '../App.css';\r\n\r\nclass CountLikes extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    likes: PropTypes.number.isRequired\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.myRefUp = React.createRef();\r\n    this.myRefDown = React.createRef();\r\n    this.state = {\r\n      countLikes: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { likes } = this.props;\r\n    this.setState({ countLikes: likes })\r\n  }\r\n\r\n  countLikes(e) {\r\n    const { name } = this.props;\r\n    const parseLikes = parseInt(this.state.countLikes);\r\n    this.setState({ countLikes: parseLikes + 1 })\r\n    this.props.updateInfo(name, parseLikes)\r\n  }\r\n\r\n  countDislikes(e) {\r\n    const { name } = this.props;\r\n    const parseLikes = parseInt(this.state.countLikes);\r\n    if (parseLikes >= 0) {\r\n      this.setState({ countLikes: parseLikes - 1 });\r\n    }else{\r\n      this.setState({ countLikes: 0 });\r\n    }\r\n    this.props.updateInfo(name, parseLikes)\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.props;\r\n    return (\r\n      <Col s={12} className=\"artist\" key={name}>\r\n        <Col s={5}>{name}</Col>\r\n        <Col s={2}><span onClick={this.countLikes.bind(this)}><Icon className=\"icon-up\">thumb_up_alt</Icon></span></Col>\r\n        <Col s={2}><span onClick={this.countDislikes.bind(this)}><Icon className=\"icon-down\">thumb_down_alt</Icon></span></Col>\r\n        <Col s={3}>{this.state.countLikes}</Col>\r\n      </Col>)\r\n  }\r\n}\r\n\r\nexport default CountLikes;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Card, CardTitle } from 'react-materialize';\r\nimport CountLikes from './CountLikes';\r\nimport '../App.css';\r\n\r\nclass Artists extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    photo: PropTypes.string.isRequired,\r\n    artistData: PropTypes.array.isRequired\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      artistData: [],\r\n      // newData: [],\r\n      orderDir: 'DESC'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { artistData } = this.props;\r\n    this.setState({ artistData: artistData })\r\n  }\r\n\r\n  updateInfo(name, countLikes) {\r\n    const artists = this.state.artistData;\r\n    artists.map(artist => {\r\n      if (artist.name === name) {\r\n        const indexUpdate = artists.indexOf(artist)\r\n        delete artists[indexUpdate];\r\n      }\r\n      return artist;\r\n    })\r\n    let { artistData } = this.state;\r\n    artistData.push({\r\n      name: name,\r\n      playcount: countLikes\r\n    })\r\n    this.setState({ artistData: artistData });\r\n  }\r\n\r\n  sortData = (data, orderDirection) => {\r\n    let dataSorted = (data).sort(\r\n      (x, y) => {\r\n        if (orderDirection === 'DESC')\r\n          return (y.playcount - x.playcount)\r\n        else\r\n          return (x.playcount - y.playcount)\r\n      }\r\n    );\r\n\r\n    return dataSorted;\r\n\r\n  }\r\n\r\n  orderDir() {\r\n    if (this.state.orderDir === 'ASC') {\r\n      this.setState({ orderDir: 'DESC' });\r\n    } else {\r\n      this.setState({ orderDir: 'ASC' });\r\n    }\r\n  }\r\n\r\n  paintArtist = (artistData) => {\r\n    // console.log(artistData);\r\n    return (\r\n      <div>\r\n        {/* <button onClick={this.orderDir.bind(this)}>sort</button> */}\r\n        {artistData.map(element => {\r\n          const likes = parseInt(element.playcount)\r\n          return (\r\n            <CountLikes name={element.name} likes={likes} updateInfo={this.updateInfo.bind(this)} />\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { photo, name } = this.props;\r\n    const sortedData = this.sortData(this.state.artistData, this.state.orderDir);\r\n    return (\r\n      <Col s={4} className=\"container\">\r\n        <Card header={<CardTitle reveal image={photo} waves='light' />}\r\n          title={name}\r\n          reveal={this.paintArtist(sortedData)}>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Artists;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Artists from './components/Artists';\r\nimport Data from './data/artist.json';\r\nimport { Row } from 'react-materialize';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { data } = this.state;\r\n    Data.forEach(artist => {\r\n      fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artist.name}&api_key=657cef2918119afec7337a5c8080f934&format=json`)\r\n        .then(response => response.json())\r\n        .then(artistsData => {\r\n          Object.values(artistsData).forEach(artistData => {\r\n            data.push({\r\n              key: artist.key,\r\n              name: artist.name,\r\n              photo: artist.photo,\r\n              artistData: artistData.track\r\n            })\r\n            this.setState({ data });\r\n          })\r\n        })\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"App\">\r\n        <h1>Ranking songs</h1>\r\n        {\r\n          this.state.data.map(artist =>{\r\n            return (<Artists name={artist.name} photo={artist.photo} key={artist.key} artistData={artist.artistData}></Artists>)\r\n          })\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}